{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/FilePicker.svelte",
    "../src/DocumentRenderer.svelte",
    "../src/DocumentControls.svelte"
  ],
  "sourcesContent": [
    "<svelte:options accessors={true}/>\n\n<script>\n\timport documentStore from './DocumentStore.js';\n\timport DocumentRenderer from './DocumentRenderer.svelte';\n\timport FilePicker from './FilePicker.svelte';\n\t\n\texport let picker;\n\texport let renderer;\n\n\tfunction openAbout() {\n\t\tconsole.log(\"about!\");\n\t}\n</script>\n\n<div id=\"grid\">\n\t<header id=\"banner\">\n\t\t<div class=\"logotype\">BillToText</div>\n\t\t<div><a href=\"about\" on:click|preventDefault|stopPropagation={openAbout}>About</a></div>\n\t</header>\n\t\n\n\t<main class:large-picker={!$documentStore.contents}>\n\t\t{#if !$documentStore.contents }\n\t\t<section id=\"front-matter\">\n\t\t\t<p>BillToText.com turns PDFs of federal legislation into text files. \n\t\t\t\tIt provides a formatted document that you can download and edit with a word processor program.\n\t\t\t</p>\n\t\t\t<p>To use, upload your bill. BillToText publishes the bill text in your browser \n\t\t\t\tand allows you to download it as a .DOCX file. If you open the file in \n\t\t\t\tMicrosoft Word, BillToText preserves the line numbers on each page. \n\t\t\t\tYou can open it as a Google doc as well, although Google does not support line numbers.\n\t\t\t</p>\n\t\t\t<p>BillToText is designed specifically for discussion drafts of legislation prepared by \n\t\t\t\tlegislative counsel in the U.S. Senate or House of Representatives.\n\t\t\t</p>\n\t\t\t<p>We do not retain or share copies of legislation uploaded to the website. We do use Google analytics \n\t\t\t\tto track general information about users of the website. (Here is our privacy policy).\n\t\t\t</p>\n\t\t</section>\n\t\t{/if}\n\t\t<section class=\"picker\" >\n\t\t\t<FilePicker accept={\"application/pdf\"} bind:this={picker} large={!$documentStore.contents} />\n\t\t</section>\n\t\t{#if $documentStore.contents }\n\t\t<section class=\"document\">\n\t\t\t<DocumentRenderer src={$documentStore} bind:this={renderer} />\n\t\t</section>\n\t\t{/if}\n\t</main>\n\t<footer class=\"attribution\">\n\t\tMade with ðŸ’– &amp; ðŸ¤” for <span class=\"logotype\">Demand Progress</span> by Ted Han &amp; the Bad Idea Factory.\n\t</footer>\n</div>\n\n<style>\n\t.large-picker section.picker {\n\t\tgrid-row-end: footer;\n\t}\n\n\tsection.picker {\n\t\tgrid-row-start: mini-picker;\n\t\tgrid-row-end: main;\n\t}\n\n\t.large-picker section.document {\n\t\tdisplay: none;\n\t}\n\n\tsection.document {\n\t\tgrid-row-start: main;\n\t\tgrid-row-end: footer;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\tfooter.attribution {\n\t\tposition: fixed;\n\t\tbottom: 0px;\n\t\ttext-align: center;\n\t}\n\n</style>\n",
    "<svelte:options accessors={true}/>\n<script>\n  import documentStore from './DocumentStore.js';\n  let file;\n  let fileInput;\n  let fileContents;\n  let form;\n  export let accept = [];\n  export let large;\n\n  export function getFilesFromDom(){\n    return filterTypes(fileInput.files);\n  }\n\n  function filterTypes(files, types=[accept].flat()) {\n    const acceptable = Array.prototype.filter.call(files, f => {\n      return types.some( type => type == f.type );\n    });\n    console.log(acceptable);\n    return acceptable;\n  }\n\n  async function readFileContents(file) {\n    let filePromise = (resolve, reject) => {\n      let reader = new FileReader();\n      reader.onload = (event) => {\n        let data = new Uint8Array(event.target.result);\n        resolve(data);\n      };\n      \n      if (file){\n        reader.readAsArrayBuffer(file);\n      } else {\n        throw \"Unable to read file: No file selected\";\n      }\n    }\n    return new Promise(filePromise);\n  }\n\n  async function getFile(file) {\n    if (file){\n      $documentStore = file;\n      fileContents = await readFileContents(file);\n      $documentStore.contents = fileContents\n    }\n  }\n\n  async function onInputHandler() {\n    console.log(\"changing!\");\n    const files = getFilesFromDom();\n    await getFile(files[0]);\n  }\n\n  async function onDrop(e){\n    console.log(\"Dropped!\", e.dataTransfer);\n    const files = filterTypes(e.dataTransfer.files);\n    await getFile(files[0]);\n  }\n\n  function onDragEnter(e){\n    console.log(\"Dragged In!\", e);\n    form.classList.add('has-dragover');\n  }\n\n  function onDragLeave(e){\n    console.log(\"Dragged Out!\", e);\n    form.classList.remove('has-dragover');\n  }\n\n</script>\n\n<form class:large \n  on:drop|preventDefault={onDrop} \n  on:dragover|preventDefault|stopPropagation \n  on:dragenter|preventDefault|stopPropagation={onDragEnter}\n  on:dragleave|preventDefault|stopPropagation={onDragLeave}\n  bind:this={form} >\n  <div id=\"drop-box\">\n    <input type=\"file\" id=\"file\" class=\"input-file\" accept={accept} bind:this={fileInput} on:input={onInputHandler} />\n    <div class=\"upload-icon\"></div>\n    <label class=\"upload-message\" for=\"file\">\n      {#if !fileContents }\n        <p><span class=\"click-here\">Choose a file</span> or drag it here.</p>\n      {:else}\n        <p><span class=\"click-here\">Choose a different file</span></p>\n      {/if}\n    </label>\n  </div>\n</form>\n\n<style>\n  form.large {\n    outline: 2px dashed #92b0b3;\n    outline-offset: -10px;\n    \n    -webkit-transition: outline-offset .15s ease-in-out, background-color .15s linear;\n    transition: outline-offset .15s ease-in-out, background-color .15s linear;\n\n    padding: 20px;\n\n    height: 100%;\n    max-height: 600px;\n  }\n\n  form {\n    display: flex;\n    padding: 10px;\n  }\n\n  :global(form.large.has-dragover) {\n    outline-offset: -20px;\n    outline-color: #c8dadf;\n    background-color: #bbb;\n  }\n\n  #drop-box {\n    display: grid;\n    justify-items: center;\n    width: 100%;\n  }\n\n  .upload-icon {\n    padding: 10px;\n  }\n\n  .large .upload-icon {\n    height: 175px;\n    width: 175px;\n    align-self: end;\n    background-image: url(/images/upload.svg);\n    background-size: contain;\n    background-repeat: no-repeat;\n  }\n\n  label.upload-message {\n    align-self: start;\n  }\n\n  .click-here {\n    cursor: pointer;\n    text-decoration: underline;\n    font-weight: bold;\n  }\n  .input-file {\n    width: 0.1px;\n    height: 0.1px;\n    opacity: 0;\n    overflow: hidden;\n    position: absolute;\n    z-index: -1;\n  }\n\n</style>\n\n\n<!--\n  Notes:\n\n  Getting files using input elements:\n  https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\n\n  Oh yeah, gotta wrap the onload as a promise:\n  https://stackoverflow.com/questions/38252194/how-can-i-convert-an-onload-promise-into-async-await/38252603\n\n  Drag and drop for files:\n  https://www.html5rocks.com/en/tutorials/file/dndfiles/\n\n  Also see the previous resource for thoughts about implementing progress indicators.\n\n  Loading documents via a typed Array\n  https://stackoverflow.com/questions/22048395/how-to-open-a-local-pdf-in-pdfjs-using-file-input\n-->",
    "<svelte:options accessors={true}/>\n\n<script>\n  export let src;          // URL or data for the pdf\n  let data = src.contents; // actually make this a file object.\n  let fileName = src.name; // with a name.\n  if (!fileName){\n    let now = new Date();\n    let nowDateString = `${now.getFullYear()}-${now.getMonth()}-${now.getDay()}`;\n    let nowTimeString = `${now.getHours()}${now.getMinutes()}${now.getSeconds()}`;\n    let nowString = `${nowDateString}-${nowTimeString}`;\n    fileName = `demand-progress-download-${nowString}`;\n  }\n\n  let pdfDoc;             // the pdf proxy object loaded by pdf.js\n  let page;               // the current page of the pdf we've loaded.\n  let viewport;           // the pdf.js viewport object for the current page\n  let textLayerParent;    // the textLayer textLayerParent for our various elements.\n  let pageCanvas;         // the canvas element the viewport is drawn into\n  let ctx;                // the canvas context object\n  let scale = 1.3;        // the presentational scale for the page\n  let pageNum = 1;        // default to the first page of the PDF.\n  let requestedPageNumber = 1;\n  let pageRendering = false;\n  let pageNumPending = null;\n  let hidePDFText = true;\n  let componentMounted = false;\n  let notification = {};\n  export let billAnalyzer;\n  export let layoutAnalyzer;\n  \n  import DocumentControls from './DocumentControls.svelte';\n  import PageLayoutAnalyzer from './pdf/page-layout-analyzer.js';\n  import BillDocument from './bill/bill-document.js';\n  import FileSaver from 'file-saver';\n\n  import { onMount, onDestroy } from 'svelte';\n  import { fade } from 'svelte/transition';\n\n\t// well this bit is a crazy mess\n\t// See: https://github.com/mozilla/pdf.js/issues/10317\n\t// and https://github.com/bundled-es-modules/pdfjs-dist\n  import pdfjs from \"@bundled-es-modules/pdfjs-dist/build/pdf\";\n  pdfjs.GlobalWorkerOptions.workerSrc = \"./pdf.worker.js\"; // this is the external url\n\n  /* \n    External API for manipulating pages.\n  */\n\n  export async function getPageLayoutAnalyzer(){\n    const text = await getText();\n    layoutAnalyzer = new PageLayoutAnalyzer(text, viewport.transform, viewport.scale, pageCanvas.width, pageCanvas.height);\n    return layoutAnalyzer;\n  }\n\n\timport { tweened } from 'svelte/motion';\n\timport { cubicOut } from 'svelte/easing';\n  let analyzeLayoutProgress;\n  let analyzeRegionProgress;\n  let dumpingDocument;\n  export async function dumpDocX() {\n    if (dumpingDocument) {\n      console.log(`Already dumping document: ${dumpingDocument}`);\n      billAnalyzer.cancel();\n    } else {\n      dumpingDocument = true;\n      const analyzerProgressLogger = (pageNumber, layout) => { \n        analyzeLayoutProgress = (pageNumber / pdfDoc.numPages);\n      };\n      const regionProgressLogger = (pageNumber, layout) => { \n        analyzeRegionProgress = (pageNumber / pdfDoc.numPages);\n      };\n\n      try {\n        setNotification(\"Analyzing Page Layout\");\n        if (await billAnalyzer.calculateLayout({ callback: analyzerProgressLogger })) {\n          analyzeLayoutProgress = undefined;\n          const opts = {\n            progressCallback: regionProgressLogger,\n          }\n          setNotification(\"Converting to Word\");\n          const blob = new Blob(\n            [await billAnalyzer.dumpDocX(opts)], \n            {type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'}\n          );\n          analyzeRegionProgress = undefined;\n          FileSaver.saveAs(blob, fileName.replace(/pdf$/, 'docx'));\n        }\n      } catch (error) {\n        console.error(\"OH NO SOMETHING WENT WRONG\");\n        console.log(error);\n        setNotification(\"We encountered an error.\")\n      }\n      analyzeLayoutProgress = undefined;\n      dumpingDocument = false;\n    }\n    clearNotification();\n  }\n\n  export async function drawTextBounds() {\n    let layoutAnalyzer = await getPageLayoutAnalyzer();\n    layoutAnalyzer._calculateStyles();\n\n    let textLayer = document.createElement('div');\n    textLayer.style = `\n      height: ${pageCanvas.height}px; \n      width: ${pageCanvas.width}px;`;\n\n    layoutAnalyzer.appendTextElementsTo(textLayer, ctx);\n    replaceTextLayer(textLayer);\n    layoutAnalyzer.appendWhiteSpaceTo(textLayer);\n    return layoutAnalyzer;\n  }\n\n  export function getPDF() {\n    return pdfDoc;\n  };\n\n  export function getCanvas() {\n    return pageCanvas;\n  };\n\n  export async function getAttachments() {\n    if (!page) { await getPage(pageNum); };\n    return await pdfDoc.getAttachments();\n  };\n\n  export async function getXML(opts) {\n    if (!page) { await getPage(pageNum); };\n    let attachments = await getAttachments();\n    // Assume the first XML file we can find is the legislative XML file.\n    let output;\n    if (attachments) {\n      let xmlFile = Object.values(attachments).find((entry) => {\n        return (entry.filename && entry.content && entry.filename.match(/\\.xml$/) )\n      });\n    \n      let fileContents = new TextDecoder('utf-8').decode(xmlFile.content);\n      if (opts && opts.text) {\n        output = fileContents;\n      } else {\n        let parser = new DOMParser();\n        let xmlDom = parser.parseFromString(fileContents, 'application/xml');\n        output = xmlDom;\n      }\n    }\n    return output;\n  }\n\n  export async function getPage(num) {\n    pageNum = num;\n    requestedPageNumber = num;\n    renderPage();\n  }\n  \n  export async function renderPage() {\n    pageRendering = true;\n    clearTextLayer();\n    page = await pdfDoc.getPage(pageNum);\n    viewport = page.getViewport({scale: scale});\n    await drawPage(pageNum);\n    let pageText = await drawTextBounds();\n    //console.log(pageText.dumpText());\n  };\n\n  export async function getText() {\n    if (!page) { await getPage(pageNum); };\n    return await getPageText(pageNum);\n  };\n\n  /*\n    Internal API below this point.\n  */\n  let drawPage = async (num) => {\n    if (!page) { await getPage(pageNum); };\n    pageRendering = true;\n    // Using promise to fetch the page\n    pageCanvas.height = viewport.height;\n    pageCanvas.width = viewport.width;\n\n    // Render PDF page into canvas context\n    let renderContext = {\n      canvasContext: ctx,\n      viewport: viewport\n    };\n    let renderTask = page.render(renderContext);\n\n    // Wait for rendering to finish\n    await renderTask.promise;\n    pageRendering = false;\n    if (pageNumPending !== null) {\n      // New page rendering is pending\n      drawPage(pageNumPending);\n      pageNumPending = null;\n    }\n    // Update page counters\n    //document.getElementById('page_num').textContent = num;\n  }\n\n  let getPageText = async () => {\n    if (!page) { await getPage(pageNum); };\n    return await page.getTextContent({normalizeWhiteSpace: true});\n  };\n\n  let loadDocument = async (source) => {\n    pdfDoc = await pdfjs.getDocument(source).promise;\n  };\n\n  let unloadDocument = async () => {\n    clearCanvas();\n    clearTextLayer();\n    pdfDoc.cleanup();\n    pdfDoc.destroy();\n  };\n\n  let clearCanvas = () => {\n    ctx.clearRect(0, 0, pageCanvas.width, pageCanvas.height);\n  };\n\n  let clearTextLayer = () => replaceTextLayer();\n\n  let replaceTextLayer = (node) => {\n    let textLayer = ( node || document.createElement('div') );\n    let currentTextLayer = document.getElementById('pdfjs-text-layer');\n    textLayerParent.replaceChild(textLayer, currentTextLayer);\n    textLayer.id = 'pdfjs-text-layer';\n  };\n\n\tonMount(async () => {\n    await loadDocument(data);\n    ctx = pageCanvas.getContext('2d');\n    billAnalyzer = new BillDocument(pdfDoc, {scale: scale});\n    componentMounted = true;\n    // console.log(billAnalyzer.getBillText());\n  });\n\n  onDestroy(() => { unloadDocument(); });\n\n  $: {\n    if (componentMounted){\n      console.log(requestedPageNumber);\n      getPage(requestedPageNumber);\n    }\n  }\n\n  $: {\n    if (pageRendering) {\n      console.log(\"Rendering Page\");\n    } else {\n      console.log(\"Done Rendering Page\");\n    }\n  }\n\n  let layoutProgressVisible = false;\n  let analyzerProgress = tweened(0, { duration: 400, easing: cubicOut });\n  $: {\n    if (analyzeLayoutProgress) {\n      layoutProgressVisible = true;\n      analyzerProgress = tweened(analyzeLayoutProgress, { duration: 400, easing: cubicOut });\n    } else {\n      layoutProgressVisible = false;\n      analyzerProgress = tweened(0, { duration: 400, easing: cubicOut });\n    }\n    //console.log(`${analyzeLayoutProgress*100}% complete analyzing document.`);\n  }\n  let regionProgress = tweened(0, { duration: 400, easing: cubicOut });\n  $: {\n    regionProgress = tweened(analyzeRegionProgress, { duration: 400, easing: cubicOut });\n    //console.log(`${analyzeLayoutProgress*100}% complete analyzing document.`);\n  }\n\n  export const setNotification = (message) => {\n    if (message){\n      notification = {\n        message: message\n      };\n    } else {\n      notification = {};\n    }\n  }\n  export const clearNotification = () => { setNotification(undefined) }\n\n  let visible = true;\n</script>\n\n<div class=\"page-wrapper\">\n  {#if pdfDoc }\n    <DocumentControls \n      bind:hidePDFText\n      bind:requestedPageNumber\n      pageCount={pdfDoc.numPages}\n      dumpDocX={dumpDocX}\n      dumpingDocument={dumpingDocument}\n    />\n    {#if notification.message }\n      <p class=\"notification\" in:fade out:fade >{notification.message}</p>\n    {/if}\n    {#if layoutProgressVisible }\n      <progress value={($analyzerProgress || 0)} in:fade out:fade ></progress>\n    {/if}\n    {#if analyzeRegionProgress }\n      <progress value={$regionProgress}></progress>\n    {/if}\n    <div class=\"display-wrapper\">\n      <div class=\"text-layer-wrapper\" class:hide={hidePDFText} bind:this={textLayerParent}>\n        <div id=\"pdfjs-text-layer\"></div>\n      </div>\n      <canvas bind:this={pageCanvas}></canvas>\n    </div>\n  {:else }\n    <p>Waiting for Page</p>\n  {/if}\n</div>\n\n<style>\n  .page-wrapper {\n    padding: 10px;\n    background-color: #ccc;\n  }\n\n  :global(#pdfjs-text-layer) { \n    position: absolute;\n    overflow: hidden;\n    /*opacity: 0.2;*/\n    line-height: 1.0;\n  }\n  \n  :global(#pdfjs-text-layer) :global(span) {\n    color: transparent;\n    position: absolute;\n    white-space: pre;\n    cursor: text;\n    transform-origin: 0% 0%;\n    border: solid 1px black;\n  }\n\n  :global(#pdfjs-text-layer) :global(span.whitespace) {\n    background-color: palegreen;\n    border: solid 1px green;\n    opacity: 95%;\n  }\n\n  .text-layer-wrapper.hide :global(#pdfjs-text-layer) :global(span) {\n    border: 0;\n    background-color: transparent;\n  }\n\n  progress {\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t}\n\n  .notification {\n    text-align: center;\n  }\n\n\n</style>\n",
    "<script>\n  let previousPage = async () => {\n    if (requestedPageNumber > 1) { requestedPageNumber--; }\n    else { requestedPageNumber = 1; }\n  };\n\n  let nextPage = async() => {\n    if (requestedPageNumber < pageCount) { requestedPageNumber++; }\n    else { requestedPageNumber = pageCount; }\n  };\n\n  export let requestedPageNumber = 1;\n  export let hidePDFText = false;\n  export let pageCount;\n  export let dumpDocX;\n  export let dumpingDocument;\n</script>\n\n<header>\n  <nav>\n    <button on:click|preventDefault={previousPage} >previous</button>\n    <p>Page {requestedPageNumber} of {pageCount}</p>\n    <button on:click|preventDefault={nextPage}>next</button>\n  </nav>\n  <nav>\n    <button id=\"showTextBoxes\" on:click|preventDefault={() => { hidePDFText = (! hidePDFText); } } >\n      {(hidePDFText) ? 'show' : 'hide' } text boxes\n    </button>\n    <button id=\"download\" on:click|preventDefault={dumpDocX}>\n      {#if dumpingDocument}\n      cancel download\n      {:else}\n      download docx\n      {/if}\n    </button>\n  </nav>\n</header>\n\n<style>\n  header {\n    display: flex;\n    justify-content: space-between\n  }\n\n  header nav {\n    display: flex;\n  }\n\n  nav button {\n    cursor: pointer;\n  }\n\n  header p {\n    vertical-align: middle;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}